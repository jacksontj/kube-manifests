#!/bin/sh

case "${1:?missing version}" in
    to-yml)
        # Extract "prometheus.yml" from kubernetes configmap,
        # replace k8s files references (like /var/lib/kuberntes/.../token) by dummy file (/dev/null)
        for f in generated/*/monitoring*/prometheus_config.json; do
            jq -r '.data["prometheus.yml"]' < $f | jq . | sed -r 's,/var/[^"]+,/dev/null,' > $f.tmp.yml
        done
        exit
        ;;
    v1)
        ck_rules="check-rules"
        ck_config="check-config"
        # v1 uses straight .rules files
        rules_files=*/config/*.rules
        cfg_files=$(grep -l 'rules"' \
	    generated/*/*/prometheus_config.json.tmp.yml 2>/dev/null)
        ;;
    v2)
        ck_rules="check rules"
        ck_config="check config"
        # v2 uses YAML for rules files
        rules_files=*/config/*.rules.yml
        cfg_files=$(grep -l 'rules.yml"' \
            generated/*/*/prometheus_config.json.tmp.yml 2>/dev/null)
        ;;
    rm-yml)
        # Cleanup files generated by `to-yml` above
        rm -f generated/*/monitoring*/prometheus_config.json.tmp.yml
        exit
        ;;
    *) exit 255;;
esac

set -e

fail=0

for f in $cfg_files; do
    echo "INFO: Verifying cfg_file: $f"
    if ! promtool ${ck_config} $f; then
        fail=$(( $fail + 1 ))
        echo "FAILED $f"
    fi
done

for f in $rules_files; do
    echo "INFO: Verifying rule_file: $f"
    if ! promtool ${ck_rules} $f; then
        fail=$(( $fail + 1 ))
        echo "FAILED $f"
    fi
done

test $fail -eq 0
